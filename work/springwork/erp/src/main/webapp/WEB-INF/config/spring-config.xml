<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	
	<!--/resources/로 요청하면 실제 /resources/위치에서 찾아서 실행하겠다는 의미
	mapping은 요청 path, location은 실제 파일이 저장된 위치  -->
	<!--이미지파일,css,js등 리소스 경로  -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/images/**" location="/WEB-INF/static/images/" />
	<resources mapping="/common/css/**" location="/WEB-INF/static/common/css/" />
	<resources mapping="/common/js/**" location="/WEB-INF/static/common/js/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value = "2"/>
	</beans:bean>
	
	<!-- annotation을 사용하기 위해서 스프링 IoC컨테이너가 스캔할 패키지 등록 -->
	<context:component-scan base-package="com.multi.erp"/>
	<context:component-scan base-package = "main"/>
	<context:component-scan base-package = "test"/>

	<!--=====================================스프링 JDBC연동을 위해서 필요한 라이브러리===================================  -->
	<!--jdbc에서 DriverManager방식으로 커넥션을 생성해서 관리(요청이 들어오면 커넥션을 만들어서 넘겨주는 방식)  -->
	<!-- <beans:bean id = "ds" class = "org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name ="driverClassName" value = "oracle.jdbc.driver.OracleDriver"/> 
		<beans:property name ="url" value = "jdbc:oracle:thin:@127.0.0.1:1521:xe"/> 
		<beans:property name ="username" value = "erp"/> 
		<beans:property name ="password" value = "erp"/> 
	</beans:bean> -->
	
	<!-- sql을 실행할 수 있는 기능을 제공하는 클래스  -->
	<beans:bean id = "template" class = "org.springframework.jdbc.core.JdbcTemplate">
		<beans:constructor-arg ref ="ds"/>
	</beans:bean>
	
	<!--===============================			커넥션 풀 등록			==============================  -->
	<beans:bean id = "hikariConfig" class = "com.zaxxer.hikari.HikariConfig">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="jdbcUrl" value="jdbc:oracle:thin:@127.0.0.1:1521:xe"/>
		<beans:property name="username" value="erp"/>
		<beans:property name="password" value="erp"/>
		<beans:property name="maximumPoolSize" value = "15"/>
	</beans:bean>
	<beans:bean id = "ds" class = "com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<beans:constructor-arg ref = "hikariConfig"/>
	</beans:bean>
	
	
	<!--=====================================tiles 기반으로 뷰 정보를 만들 수 있도록 ViewResolver등록 ===================================  -->
	<!--1. tiles 설정 파일을 스프링 내부에서 인식할 수 있도록 등록 -->
	<beans:bean id = "tilesConfigurer" class = "org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/**/*-tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<!--2. tiles 기반으로 뷰를 만들 수 있도록 ViewResolver등록  -->
	<beans:bean id = "tilesViewResolver" class = "org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name ="viewClass" value = "org.springframework.web.servlet.view.tiles3.TilesView"/>
		<beans:property name="order" value = "1"/>
	</beans:bean>
	
	<!--===============================MyBatis 사용을 위해서 필요한 라이브러리==============================  -->
	<beans:bean id ="sessionFactory" class = "org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name = "dataSource" ref = "ds"/>
		<beans:property name = "configLocation" value="/WEB-INF/config/mybatis-config.xml"/>
	</beans:bean>
	<!-- MyBatis의 핵심클래스(sql을 실행하기 위한 기능을 제공) -->
	<beans:bean id = "sqlSession" class = "org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref = "sessionFactory"/>
	</beans:bean>
	<!--=============================== 파일 업로드 ==============================  -->
	<beans:bean id = "multipartResolver" class = "org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name = "maxUploadSize" value = "4000000"/>
	</beans:bean>
</beans:beans>



