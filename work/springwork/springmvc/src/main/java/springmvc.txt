웹 서버
 - 정적 리소스(이미지, css, js, 정적 html 파일)를 서비스
 - JSON, XML 데이터 서비스
 - 클라이언트의 요청을 받고 클라이언트에게 응답을 보낼 수 있는 기능
 - http통신
 
웹 어플리케이션 서버 (Web Application Server - WAS)
 - http 통신
 - 웹서버 + 어플리케이션서버(서블릿 컨테이너..)
 - 비지니스 로직을 수행하고 수행결과를 만들기
 - 동적 html, servlet, jsp, 스프링mvc 
 
SSR (Server Side Rendering 서버 사이드 렌더링)
 - 서버에서 뷰를 만들어서 클라이언트에게 전달
 - JSP, 타임리프

CSR (Client Side Rendering 클라이언트 사이드 렌더링)
 - react, vue.js
 - 클라이언트가 서버한테 요청을 보내면 서버가 클라이언트에게 데이터만 전송
 											 ------
 										  단순문자열, JSON, XML
 										  
 - 클라이언트에서 데이터를 받아서 실행결과를 만들기(자바스크립트로(jQuery)로)
 - Ajax (Asynchronous Javascript And XML)로 요청
   => 화면 전체가 바뀌지 않고 일부만 바뀐다.
   => url, data를 넘기면 실행결과가 JSON으로 리턴

 [실습2]
 	test라는 spring mvc project를 만들고 설정파일의 위치를 변경
 			------------------		 ---------------
 			com.multi.test			    config
 									       +
 									       |---- spring-config.xml
 									       
 	index.jsp가 실행되도록 IndexController 만들기
 		- index.jsp가 WEB-INF에 위치
 		- IndexController는 main패키지에 위치
 		- index메소드
 		- path : /index.do
 		
 	index.jsp
 		<h2>테스트화면</h2>
 		
 		/test/index.do
 		
 	제출: /test/index.do를 실행한 결과를 캡쳐(요청 path가 보이도록)
 
[스프링 MVC 구조]
 - 스프링 MVC는 역할을 분리
 - 기본으로 frontcontroller 패턴이 적용
 - 이 모든 구성요소가 내부에서 웹 요청을 위해 동작하고 각각의 상황에 맞게 작업할 수 있도록 HandlerMapping, ViewResolcer
   HandlerAdapter, View등이 동작하며 다양한 상황을 반영할 수 있도록 여러개의 하위들이 존재
 - 사용자가 설정파일에 정의하지 않으면 기본으로 실행되는 구성요소들이 미리 정해져서 실행되고 있음
 - 뷰를 요청하는 것도 스프링 컨트롤러를 통해서 실행되도록 처리
 				 -----------------------------
       			모든 작업이 스프링 내부에서 처리될 수 있도록
       			
1. DispatcherServlet:클라이언트의 요청을 받아서 요청을 분석하고 spring mvc구조를 구성하는 구성요소들이 실행될 수 있도록 처리
					(FrontServlet과 동일한)
2. HandlerMapping : DispatcherServlet이 넘겨준 요청 path를 이용해서 실행할 컨트롤러를 찾아서 DispatcherServlet에 전달
3. HandlerAdapter : DispatcherServlet에서 전달받은 컨트롤러를 호출해서 실행하고 실행결과를 DispatcherServlet에 넘겨주는 작업
					ModelAndView객체로 만들어서 리턴
					------------
					(Model과 View에 대한 정보를 담고있는 객체)
4. Controller : 개발자가 웹에서 처리하고 싶은 내용을 기술(서블릿에서 작업했던 내용을 컨트롤러에서 처리 - Action들)
				@Controller어노테이션이 추가되어야 컨트롤러로 인식
				컨트롤러 -> 서비스 -> DAO       								  
 										  
5. ViewResolver : DispatcherServlet이 넘겨준 뷰 정보를 기반으로 설정파일에서 어떤 뷰를 만들어야 하는지 찾아서 리턴
6. View : 뷰 정보를 기반으로 뷰를 만들어서 리턴


[컨트롤러 만들기]
 - spring mvc프레임워크에서 서비스 되도록 하려면 컨트롤러를 만들어야 한다.
 - 컨트롤러로 인식되기 위해서는 @Controller를 클래스 위에 선언
 - 메소드를 정의해서 처리하고 싶은 일들을 처리하도록 작업
 - view를 실행하기 위한 작업도 jsp를 직업 실행할 수 없고 컨트롤러를 통해서 실행
 
 1. 메소드를 정의
 	1) 메소드 명은 사용자 정의로 작성
 	   public 리턴타입 메소드명 (매개변수...){
 	   		// 서블릿에서 처리하는 작업을 구현
 	   		
 	   } 										  
    2) 메소드 선언부 위에 매핑정보를 정의
       - @RequestMapping("/path")
 										  
 	3) 매개변수
 	   - 허용되는 타입 안에서 원하는 타입을 정의
 	   ① HttpServletRequest : 요청객체를 통해 요청정보 직접 엑세스하거나 request가 제공하는 메소드를 사용하는 경우
 	   ② String : view에서 전달되는 
 	3) 리턴타입
 	   - 허용되는 타입 안에서 원하는 타입을 정의
 	   ① String : view에 대한 정보만 명시
 	   ② ModelAndView : model과 view의 정보가 모두 저장된 객체
 	   					----
 	   				웹페이지에서 공유할 데이터
 	   				
 										  
 										  
 										  
 										  
 										  
 										  
 										  
 										  