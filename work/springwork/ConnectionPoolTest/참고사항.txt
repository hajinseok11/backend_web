테스트
	1. 라이브러리 추가하기
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.13.2</version>
		<scope>test</scope>
	</dependency>  
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-test</artifactId>
		<version>5.2.7.RELEASE</version>
		<scope>test</scope>
	</dependency>
	
[Connection Pool]
1. 기존 커넥션을 관리하는 방법
	=> 요청이 들어오면 커넥션을 매번 직접 생성하는 방식
	
	① 어플리케이션을 이용해서 커넥션을 요청
	② 드라이버가 DB서버에 연결한다. (TCP/IP통신)
		=> 연결하는 과정에서 네트워크 통신이 발생한다.(3way handShake)
	③ 커넥션이 연결되면 계정과 계정 패스워드를 이용해서 내부적으로 인증 작업을 수행
	④ 인증이 완료되면 sql을 사용할 수 있는 세션이 만들어진다.
		=> 같은 세션인 경우만 트랜잭션을 처리할 수 있다.
	
	④ 디비 서버가 생성된 커넥션 정보를 리턴
	⑤ 커넥션을 이용해서 SQL문을 실행
		
2. 문제점
	=> 매번 커넥션을 만들 때마다 네트워크 접속이 발생하므로 리소스를 많이 사용
	=> 시간이 지연
	
3. Connection Pool
	=> 해결하기 위해 동시간대 평균접속자 수를 고려해서 커넥션을 미리 만들어서 관리하는 방법
	=> WAS가 시작될 때 미리 만들어서 대기
					-------------
					DB서버와 네트워크로 연결도 미리 해 놓음
	
	=> 요청이 들어오면 커넥션풀에서 커넥션을 꺼내서 반환(네트워크 연결하고 커넥션 만드는 시간이 없어진다.)
	=> SQL을 바로 실행할 수 있다.
	=> SQL의 실행이 끝나면 커넥션을 종료하지 않고 커넥션풀로 다시 반환
	=> 사용도 편리하고 오픈소스로 제공되는 커넥션풀이 많이 있다.
	=> 기본으로 항상 커넥션 풀을 사용한다.
	=> common-dbcp, was마다 제공(tomcat-dbcp), HikariCP(spring boot 2.0부터 기본으로 포함)
	=> 커넥션 풀을 어떻게 사용하냐에 따라 커넥션풀을 접근하는 방법이 다를 것이므로 커넥션풀에서 커넥션을 꺼내는 방법을 표준으로 제공하는 인터페이스가
	   java.sql.DataSource

4. HikariCP 설정
	1) 라이브러리 추가
	2) HikariConfig
		=> DB 서버에 대한 정보를 설정
		=> 드라이버, 연결 문자열, 계정, 계정 패스워드
		=> 커넥션 풀에 대한 설정
			(커넥션 풀로 관리할 커넥션의 개수, 연결 풀에서 HikariCP가 관리하는 유휴 연결 수, 연결을 위한 최대 유휴 시간, ...)
	3) HikariDataSource
		=> HikariConfig를 기반으로 만들어진 커넥션 풀에서 커넥션을 관리하는 객체
		=> 기본설정이 커넥션 10개 제공
			
	
		
		
		
		
		
		 	
	