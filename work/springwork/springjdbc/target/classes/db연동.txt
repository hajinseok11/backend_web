[DB연동]
JDBC -> Spring JDBC -> MyBatis -> JPA
	   -------------
		JdbcTemplate

1. SQL Mapper
	=> JdbcTemplate
	=> MyBatis
	=> 개발자가 직접 SQL문을 생성
	1) JdbcTemplate
		① JDBC를 사용하기 위해서 반복적으로 정의했던 내용을 대신 처리해준다.
			- 커넥션 생성
			- Statement객체 생성
			- SQL실행
			- try~catch~finally로 처리
			- select인 경우 ResultSet에 대한 결과 처리
			- 자원반납
			
		② 개발자가 sql문과 ?에 대한 값만 설정 (나머지는 스프링 내부에서 모두 처리한다.)
		③ Connection을 관리하는 객체와 JdbcTemplate을 이용해서 작업
		
2. JdbcTemplate
	1) JdbcTemplate을 사용하기 위한 작업순서
		① 라이브러리를 pom.xml에 등록
		  => Spring Jdbc, 오라클 드라이버
		② 커넥션을 관리하는 객체 생성
		  => 커넥션 풀을 사용할 것이나 DriverManager 방식으로 커넥션 객체를 관리하는 방식을 사용
		  						------------------
		  						요청이 들어오면 커넥션 객체를 하나 씩 만들어서 리턴
		  => DriverManagerDataSource
		  => spring기능을 사용하기 위해서 필요한 객체로 객체를 생성하고 관리하는 작업을 IoC컨테이너가 작업
		  => IoC컨테이너가 커넥션을 관리하는 기능을 갖고 있는 DriverManagerDataSource객체를 생성할 수 있도록
		  	 설정정보를 xml에 정의
		  	 ------
		  	 	드라이버, url, 계정, 계정 패스워드
		  	 	
		③ SQL을 생성할 수 있는 객체 생성
		  => JdbcTemplate
		  => IoC컨테이너에서 생성
		  => JdbcTemplate내부에서 SQL문을 처리하기 위해 커넥션 객체가 필요
		  => DriverManagerDataSource객체로부터 얻는다. (DBUtil에서 getConnect메소드를 호출해서 커넥션을 얻는 작업)
		  	 ------------------------------------
		  	 	관계를 IoC컨테이너가 매핑
	[실습]
	scott/tiger 계정으로 접속해서 member 테이블의 레코드 수를 조회하는 작업을 해보세요
		- member.xml로 작업
		- MemberDAO 작업
		- MemberDAOTest 작업
		
		조회된 레코드 수: ___ 개
		
	2) JdbcTemplate 메소드
	   ① update - insert, delete, update를 처리하기 위한 jdbcTemplate의 메소드
	   ② 조회하기
	     - 조회된 레코드를 어떻게 처리해야 하는지 정의
	     - RowMapper객체를 정의
	       --------
	       조회된 레코드 한 개를 객체로 변환할 수 있도록 정의
	     - queryForObject - select의 결과가 객체 하나로 매핑될 수 있는 경우 
	     - query : select의 결과가 레코드 한 개 이상을 리턴하는 경우
	     		   List로 반환
	     
		
		
		  	 	
		  	 	
		  	 	
		  	 	
		  	 	
		  	 	
		  	 	
2. ORM(Object Relational Mapping)
   => JPA
   
   
   
   